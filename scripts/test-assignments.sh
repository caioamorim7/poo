#!/bin/bash

# Diret√≥rio base para as tarefas
BASE_DIR="assignments"

# Solicita a tarefa a ser testada uma √∫nica vez
read -p "Digite o diret√≥rio da tarefa (ou pressione Enter para testar todas): " TASK_DIR

# Se n√£o for informado, roda todas as tarefas dispon√≠veis
if [ -z "$TASK_DIR" ]; then
    echo "üîé Nenhuma tarefa espec√≠fica informada. Buscando todas as tarefas dispon√≠veis..."
    TASKS=($(ls -d $BASE_DIR/*/ 2>/dev/null))
else
    TASKS=("$BASE_DIR/$TASK_DIR/")
fi

# Solicita o aluno a ser testado uma √∫nica vez
read -p "Digite o diret√≥rio do aluno (ou pressione Enter para testar todos): " STUDENT_DIR

# Itera sobre todas as tarefas selecionadas
for TASK in "${TASKS[@]}"; do
    TASK_NAME=$(basename "$TASK")

    # Verifica se o diret√≥rio da tarefa realmente existe
    if [ ! -d "$TASK" ]; then
        echo "‚ö†Ô∏è  Aviso: O diret√≥rio da tarefa '$TASK_NAME' n√£o existe! Pulando..."
        continue
    fi

    # Diret√≥rio de submiss√µes
    SUBMISSIONS_DIR="$TASK/submissions"

    # Se n√£o existir submiss√µes para essa tarefa, pula para a pr√≥xima
    if [ ! -d "$SUBMISSIONS_DIR" ]; then
        echo "‚ö†Ô∏è  Aviso: Nenhuma submiss√£o encontrada para a tarefa '$TASK_NAME'. Pulando..."
        continue
    fi

    # Define a lista de alunos a testar
    if [ -z "$STUDENT_DIR" ]; then
        echo "üìÇ Nenhum aluno espec√≠fico informado. Testando todas as submiss√µes para '$TASK_NAME'."
        STUDENTS=($(ls -d $SUBMISSIONS_DIR/*/ 2>/dev/null))
    else
        # Valida se o diret√≥rio do aluno existe
        if [ ! -d "$SUBMISSIONS_DIR/$STUDENT_DIR" ]; then
            echo "‚ö†Ô∏è  Aviso: O diret√≥rio do aluno '$STUDENT_DIR' n√£o existe para a tarefa '$TASK_NAME'! Pulando..."
            continue
        fi
        STUDENTS=("$SUBMISSIONS_DIR/$STUDENT_DIR/")
    fi

    # Loop para testar cada submiss√£o de aluno
    for STUDENT in "${STUDENTS[@]}"; do
        STUDENT_NAME=$(basename "$STUDENT")
        echo "üöÄ Executando testes para a tarefa '$TASK_NAME' do aluno '$STUDENT_NAME'..."

        # Diret√≥rio onde os arquivos est√£o
        CODE_DIR="$STUDENT/src"

        # Verifica se o c√≥digo-fonte existe
        if [ ! -d "$CODE_DIR" ]; then
            echo "‚ö†Ô∏è  Aviso: Nenhum c√≥digo-fonte encontrado em '$CODE_DIR'. Pulando..."
            continue
        fi

        # Diret√≥rio de compila√ß√£o
        BIN_DIR="$STUDENT/bin"
        mkdir -p "$BIN_DIR"
        
        # Baixa depend√™ncias (caso necess√°rio)
        mkdir -p "$STUDENT/lib"
        curl -L -o "$STUDENT/lib/junit-platform-console-standalone-1.11.4.jar" \
             https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.11.4/junit-platform-console-standalone-1.11.4.jar
        
        # Compila os arquivos
        javac -cp "$STUDENT/lib/*" -d "$BIN_DIR" "$CODE_DIR"/*.java "$TASK/test"/*.java

        # Executa os testes
        java -jar "$STUDENT/lib/junit-platform-console-standalone-1.11.4.jar" execute --class-path "$BIN_DIR" --scan-class-path
    done
done

echo "‚úÖ Execu√ß√£o dos testes finalizada!"